{
  "{\"sourceRoot\":\"/Users/jaymemitchell/Desktop/7shifts-tech-interview/src/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/jaymemitchell/Desktop/7shifts-tech-interview\",\"filename\":\"/Users/jaymemitchell/Desktop/7shifts-tech-interview/src/string-calculator.test.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/jaymemitchell/Desktop/7shifts-tech-interview\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.12.10": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/jaymemitchell/Desktop/7shifts-tech-interview/src/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/jaymemitchell/Desktop/7shifts-tech-interview",
      "filename": "/Users/jaymemitchell/Desktop/7shifts-tech-interview/src/string-calculator.test.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/jaymemitchell/Desktop/7shifts-tech-interview",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "BigIntLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "StaticBlock": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/jaymemitchell/Desktop/7shifts-tech-interview/src/string-calculator.test.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/jaymemitchell/Desktop/7shifts-tech-interview/src/string-calculator.test.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/jaymemitchell/Desktop/7shifts-tech-interview/src/",
        "sourceFileName": "string-calculator.test.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _stringCalculator = require(\"./string-calculator\");\n\nvar _chai = require(\"chai\");\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\ndescribe(\"String Calculator, Add - basic functionality\", function () {\n  it(\"Returns 0 when passed an empty string\", function () {\n    var expected = 0;\n    var actual = (0, _stringCalculator.Add)(\"\");\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n  it(\"Returns an integer when passed in a string of numbers\", function () {\n    var expected = \"number\";\n    var actual = (0, _stringCalculator.Add)(\"1,2\");\n    (0, _chai.expect)(_typeof(actual)).to.deep.equal(expected);\n  });\n  it(\"Correctly handles only one number being passed in (one digit)\", function () {\n    var expected = 4;\n    var actual = (0, _stringCalculator.Add)(\"4\");\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n  it(\"Correctly handles only one number being passed in (multiple digits)\", function () {\n    var expected = 306;\n    var actual = (0, _stringCalculator.Add)(\"306\");\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n  it(\"Correctly handles a long list of numbers (ex. 10)\", function () {\n    var expected = 55;\n    var actual = (0, _stringCalculator.Add)(\"1,2,3,4,5,6,7,8,9,10\");\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n  it(\"Example input works: Returns 8 when passed in 1,2,5\", function () {\n    var expected = 8;\n    var actual = (0, _stringCalculator.Add)(\"1,2,5\");\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n});\ndescribe(\"Handles New Lines, Custom Delimiters, and Negatives\", function () {\n  it(\"Adds numbers with new line symbol attached (example input 1)\", function () {\n    var expected = 6;\n    var actual = (0, _stringCalculator.Add)(\"1\\n,2,3\");\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n  it(\"Adds numbers with new line symbol attached (example input 2)\", function () {\n    var expected = 7;\n    var actual = (0, _stringCalculator.Add)(\"1,\\n2,4\");\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n  it(\"Supports a custom delimiter (example input 1)\", function () {\n    var expected = 8;\n    var actual = (0, _stringCalculator.Add)(\"//;\\n1;3;4\");\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n  it(\"Supports a custom delimiter (example input 2)\", function () {\n    var expected = 6;\n    var actual = (0, _stringCalculator.Add)(\"//$\\n1$2$3\");\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n  it(\"Supports a custom delimiter (example input 3)\", function () {\n    var expected = 13;\n    var actual = (0, _stringCalculator.Add)(\"//@\\n2@3@8\");\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n  it(\"Throws an exception for negative numbers; negative at the end\", function () {\n    var expected = \"Negatives not allowed. Negatives: -5\";\n    var actual = (0, _stringCalculator.Add)(\"1,2,-5\");\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n  it(\"Throws an exception for negative numbers; negative in the middle\", function () {\n    var expected = \"Negatives not allowed. Negatives: -2\";\n    var actual = (0, _stringCalculator.Add)(\"1,-2,5\");\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n  it(\"Throws an exception for negative numbers; negative at the beginning\", function () {\n    var expected = \"Negatives not allowed. Negatives: -1\";\n    var actual = (0, _stringCalculator.Add)(\"-1,2,5\");\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n  it(\"Throws an exception for negative numbers with custom delimiter\", function () {\n    var expected = \"Negatives not allowed. Negatives: -8\";\n    var actual = (0, _stringCalculator.Add)(\"//@\\n2@3@-8\");\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n  it(\"Throws an exception for negative numbers with custom delimiter; negative at the beginning\", function () {\n    var expected = \"Negatives not allowed. Negatives: -8\";\n    var actual = (0, _stringCalculator.Add)(\"//@\\n2@3@-8\");\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n  it(\"Returns multiple negatives\", function () {\n    var expected = \"Negatives not allowed. Negatives: -2,-8,-5\";\n    var actual = (0, _stringCalculator.Add)(\"//@\\n-2@3@-8,-5\");\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n});\ndescribe(\"Bonus Section Tests\", function () {\n  it(\"Ignores numbers greater than 1000\", function () {\n    var expected = 2;\n    var actual = (0, _stringCalculator.Add)(\"2,1001\");\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n  it(\"Ignores single number string greater than 1000\", function () {\n    var expected = 0;\n    var actual = (0, _stringCalculator.Add)(\"1001\");\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n  it(\"Delimiters can be arbitrary length\", function () {\n    var expected = 6;\n    var actual = (0, _stringCalculator.Add)(\"//***\\n1***2***3\");\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n  it(\"Allows matching delimiters of different lengths\", function () {\n    var expected = 6;\n    var actual = (0, _stringCalculator.Add)(\"//***\\n1**2***3\");\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n  it(\"Allow for multiple delimiters\", function () {\n    var expected = 6;\n    var actual = (0, _stringCalculator.Add)(\"//$,@\\n1$2@3\");\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n  it(\"Allow for multiple delimiters of arbitrary legth\", function () {\n    var expected = 10;\n    var actual = (0, _stringCalculator.Add)(\"//$,@@,***,$$\\n1$2@@3***4\");\n    (0, _chai.expect)(actual).to.deep.equal(expected);\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "string-calculator.test.js"
      ],
      "names": [
        "describe",
        "it",
        "expected",
        "actual",
        "to",
        "deep",
        "equal"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/jaymemitchell/Desktop/7shifts-tech-interview/src/",
      "sourcesContent": [
        "import { Add } from \"./string-calculator\";\nimport { expect } from \"chai\";\n\ndescribe(\"String Calculator, Add - basic functionality\", () => {\n  it(\"Returns 0 when passed an empty string\", () => {\n    const expected = 0;\n    const actual = Add(\"\");\n    expect(actual).to.deep.equal(expected);\n  });\n  it(\"Returns an integer when passed in a string of numbers\", () => {\n    const expected = \"number\";\n    const actual = Add(\"1,2\");\n    expect(typeof actual).to.deep.equal(expected);\n  });\n\n  it(\"Correctly handles only one number being passed in (one digit)\", () => {\n    const expected = 4;\n    const actual = Add(\"4\");\n    expect(actual).to.deep.equal(expected);\n  });\n  it(\"Correctly handles only one number being passed in (multiple digits)\", () => {\n    const expected = 306;\n    const actual = Add(\"306\");\n    expect(actual).to.deep.equal(expected);\n  });\n  it(\"Correctly handles a long list of numbers (ex. 10)\", () => {\n    const expected = 55;\n    const actual = Add(\"1,2,3,4,5,6,7,8,9,10\");\n    expect(actual).to.deep.equal(expected);\n  });\n  it(\"Example input works: Returns 8 when passed in 1,2,5\", () => {\n    const expected = 8;\n    const actual = Add(\"1,2,5\");\n    expect(actual).to.deep.equal(expected);\n  });\n});\n\ndescribe(\"Handles New Lines, Custom Delimiters, and Negatives\", () => {\n  it(\"Adds numbers with new line symbol attached (example input 1)\", () => {\n    const expected = 6;\n    const actual = Add(\"1\\n,2,3\");\n    expect(actual).to.deep.equal(expected);\n  });\n  it(\"Adds numbers with new line symbol attached (example input 2)\", () => {\n    const expected = 7;\n    const actual = Add(\"1,\\n2,4\");\n    expect(actual).to.deep.equal(expected);\n  });\n  it(\"Supports a custom delimiter (example input 1)\", () => {\n    const expected = 8;\n    const actual = Add(\"//;\\n1;3;4\");\n    expect(actual).to.deep.equal(expected);\n  });\n  it(\"Supports a custom delimiter (example input 2)\", () => {\n    const expected = 6;\n    const actual = Add(\"//$\\n1$2$3\");\n    expect(actual).to.deep.equal(expected);\n  });\n  it(\"Supports a custom delimiter (example input 3)\", () => {\n    const expected = 13;\n    const actual = Add(\"//@\\n2@3@8\");\n    expect(actual).to.deep.equal(expected);\n  });\n  it(\"Throws an exception for negative numbers; negative at the end\", () => {\n    const expected = \"Negatives not allowed. Negatives: -5\";\n    const actual = Add(\"1,2,-5\");\n    expect(actual).to.deep.equal(expected);\n  });\n  it(\"Throws an exception for negative numbers; negative in the middle\", () => {\n    const expected = \"Negatives not allowed. Negatives: -2\";\n    const actual = Add(\"1,-2,5\");\n    expect(actual).to.deep.equal(expected);\n  });\n  it(\"Throws an exception for negative numbers; negative at the beginning\", () => {\n    const expected = \"Negatives not allowed. Negatives: -1\";\n    const actual = Add(\"-1,2,5\");\n    expect(actual).to.deep.equal(expected);\n  });\n  it(\"Throws an exception for negative numbers with custom delimiter\", () => {\n    const expected = \"Negatives not allowed. Negatives: -8\";\n    const actual = Add(\"//@\\n2@3@-8\");\n    expect(actual).to.deep.equal(expected);\n  });\n  it(\"Throws an exception for negative numbers with custom delimiter; negative at the beginning\", () => {\n    const expected = \"Negatives not allowed. Negatives: -8\";\n    const actual = Add(\"//@\\n2@3@-8\");\n    expect(actual).to.deep.equal(expected);\n  });\n  it(\"Returns multiple negatives\", () => {\n    const expected = \"Negatives not allowed. Negatives: -2,-8,-5\";\n    const actual = Add(\"//@\\n-2@3@-8,-5\");\n    expect(actual).to.deep.equal(expected);\n  });\n});\n\ndescribe(\"Bonus Section Tests\", () => {\n  it(\"Ignores numbers greater than 1000\", () => {\n    const expected = 2;\n    const actual = Add(\"2,1001\");\n    expect(actual).to.deep.equal(expected);\n  });\n  it(\"Ignores single number string greater than 1000\", () => {\n    const expected = 0;\n    const actual = Add(\"1001\");\n    expect(actual).to.deep.equal(expected);\n  });\n  it(\"Delimiters can be arbitrary length\", () => {\n    const expected = 6;\n    const actual = Add(\"//***\\n1***2***3\");\n    expect(actual).to.deep.equal(expected);\n  });\n  it(\"Allows matching delimiters of different lengths\", () => {\n    const expected = 6;\n    const actual = Add(\"//***\\n1**2***3\");\n    expect(actual).to.deep.equal(expected);\n  });\n  it(\"Allow for multiple delimiters\", () => {\n    const expected = 6;\n    const actual = Add(\"//$,@\\n1$2@3\");\n    expect(actual).to.deep.equal(expected);\n  });\n  it(\"Allow for multiple delimiters of arbitrary legth\", () => {\n    const expected = 10;\n    const actual = Add(\"//$,@@,***,$$\\n1$2@@3***4\");\n    expect(actual).to.deep.equal(expected);\n  });\n});\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1611432974844
  },
  "{\"sourceRoot\":\"/Users/jaymemitchell/Desktop/7shifts-tech-interview/src/\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/jaymemitchell/Desktop/7shifts-tech-interview\",\"filename\":\"/Users/jaymemitchell/Desktop/7shifts-tech-interview/src/string-calculator.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/jaymemitchell/Desktop/7shifts-tech-interview\",\"plugins\":[{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.12.10": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/jaymemitchell/Desktop/7shifts-tech-interview/src/",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/jaymemitchell/Desktop/7shifts-tech-interview",
      "filename": "/Users/jaymemitchell/Desktop/7shifts-tech-interview/src/string-calculator.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/jaymemitchell/Desktop/7shifts-tech-interview",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "BigIntLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "StaticBlock": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/jaymemitchell/Desktop/7shifts-tech-interview/src/string-calculator.js",
        "plugins": [
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/jaymemitchell/Desktop/7shifts-tech-interview/src/string-calculator.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/jaymemitchell/Desktop/7shifts-tech-interview/src/",
        "sourceFileName": "string-calculator.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Add = void 0;\n\n//String Calculator Function: Adds all numbers (separated by non-number delimiters) in a string\nvar Add = function Add(string) {\n  //Cases for empty string & single number string\n  if (!string.length) {\n    return 0;\n  } //handles a string that is a single number\n\n\n  if (!string.includes(\",\") && !string.includes(\"//\")) {\n    //makes sure single number is less than 1000\n    if (parseInt(string) < 1000) {\n      return parseInt(string);\n    } else {\n      return 0;\n    }\n  } //if the string contains the control code beginning, replace the possible custom delimiters\n\n\n  if (string.substring(0, 2) == \"//\") {\n    //remove slashes\n    string = string.substring(2); //Replace any non-numbers (except for hyphens which determine negatives) with a comma. Then replace multiple commas in a row with a single comma\n\n    string = string.replace(/[^0-9\\-]/g, \",\").replace(/\\,+/gm, \",\");\n  } //Turn the string into an array of integers\n\n\n  var numsArray = string.split(\",\").map(function (num) {\n    return parseInt(num);\n  }); //Check for negative numbers. If there are negatives, return all negative numbers in the string\n\n  if (numsArray.some(function (num) {\n    return num < 0;\n  })) {\n    return \"Negatives not allowed. Negatives: \".concat(numsArray.filter(function (num) {\n      return num < 0;\n    }));\n  } //ignores numbers greater than 1000 (& NaN)\n\n\n  var filteredArray = numsArray.filter(function (num) {\n    return num <= 1000;\n  }); //adds all of the numbers in the array and returns the result\n\n  return filteredArray.reduce(function (a, b) {\n    return a + b;\n  }, 0);\n};\n\nexports.Add = Add;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0cmluZy1jYWxjdWxhdG9yLmpzIl0sIm5hbWVzIjpbIkFkZCIsInN0cmluZyIsImxlbmd0aCIsImluY2x1ZGVzIiwicGFyc2VJbnQiLCJzdWJzdHJpbmciLCJyZXBsYWNlIiwibnVtc0FycmF5Iiwic3BsaXQiLCJtYXAiLCJudW0iLCJzb21lIiwiZmlsdGVyIiwiZmlsdGVyZWRBcnJheSIsInJlZHVjZSIsImEiLCJiIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFFTyxJQUFNQSxHQUFHLEdBQUcsU0FBTkEsR0FBTSxDQUFDQyxNQUFELEVBQVk7QUFDN0I7QUFDQSxNQUFJLENBQUNBLE1BQU0sQ0FBQ0MsTUFBWixFQUFvQjtBQUNsQixXQUFPLENBQVA7QUFDRCxHQUo0QixDQUs3Qjs7O0FBQ0EsTUFBSSxDQUFDRCxNQUFNLENBQUNFLFFBQVAsQ0FBZ0IsR0FBaEIsQ0FBRCxJQUF5QixDQUFDRixNQUFNLENBQUNFLFFBQVAsQ0FBZ0IsSUFBaEIsQ0FBOUIsRUFBcUQ7QUFDbkQ7QUFDQSxRQUFJQyxRQUFRLENBQUNILE1BQUQsQ0FBUixHQUFtQixJQUF2QixFQUE2QjtBQUMzQixhQUFPRyxRQUFRLENBQUNILE1BQUQsQ0FBZjtBQUNELEtBRkQsTUFFTztBQUNMLGFBQU8sQ0FBUDtBQUNEO0FBQ0YsR0FiNEIsQ0FlN0I7OztBQUNBLE1BQUlBLE1BQU0sQ0FBQ0ksU0FBUCxDQUFpQixDQUFqQixFQUFvQixDQUFwQixLQUEwQixJQUE5QixFQUFvQztBQUNsQztBQUNBSixJQUFBQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQ0ksU0FBUCxDQUFpQixDQUFqQixDQUFULENBRmtDLENBR2xDOztBQUNBSixJQUFBQSxNQUFNLEdBQUdBLE1BQU0sQ0FBQ0ssT0FBUCxDQUFlLFdBQWYsRUFBNEIsR0FBNUIsRUFBaUNBLE9BQWpDLENBQXlDLE9BQXpDLEVBQWtELEdBQWxELENBQVQ7QUFDRCxHQXJCNEIsQ0FzQjdCOzs7QUFDQSxNQUFNQyxTQUFTLEdBQUdOLE1BQU0sQ0FBQ08sS0FBUCxDQUFhLEdBQWIsRUFBa0JDLEdBQWxCLENBQXNCLFVBQUNDLEdBQUQ7QUFBQSxXQUFTTixRQUFRLENBQUNNLEdBQUQsQ0FBakI7QUFBQSxHQUF0QixDQUFsQixDQXZCNkIsQ0F5QjdCOztBQUNBLE1BQUlILFNBQVMsQ0FBQ0ksSUFBVixDQUFlLFVBQUNELEdBQUQ7QUFBQSxXQUFTQSxHQUFHLEdBQUcsQ0FBZjtBQUFBLEdBQWYsQ0FBSixFQUFzQztBQUNwQyx1REFBNENILFNBQVMsQ0FBQ0ssTUFBVixDQUFpQixVQUFDRixHQUFELEVBQVM7QUFDcEUsYUFBT0EsR0FBRyxHQUFHLENBQWI7QUFDRCxLQUYyQyxDQUE1QztBQUdELEdBOUI0QixDQWdDN0I7OztBQUNBLE1BQUlHLGFBQWEsR0FBR04sU0FBUyxDQUFDSyxNQUFWLENBQWlCLFVBQUNGLEdBQUQsRUFBUztBQUM1QyxXQUFPQSxHQUFHLElBQUksSUFBZDtBQUNELEdBRm1CLENBQXBCLENBakM2QixDQXFDN0I7O0FBQ0EsU0FBT0csYUFBYSxDQUFDQyxNQUFkLENBQXFCLFVBQUNDLENBQUQsRUFBSUMsQ0FBSjtBQUFBLFdBQVVELENBQUMsR0FBR0MsQ0FBZDtBQUFBLEdBQXJCLEVBQXNDLENBQXRDLENBQVA7QUFDRCxDQXZDTSIsInNvdXJjZVJvb3QiOiIvVXNlcnMvamF5bWVtaXRjaGVsbC9EZXNrdG9wLzdzaGlmdHMtdGVjaC1pbnRlcnZpZXcvc3JjLyIsInNvdXJjZXNDb250ZW50IjpbIi8vU3RyaW5nIENhbGN1bGF0b3IgRnVuY3Rpb246IEFkZHMgYWxsIG51bWJlcnMgKHNlcGFyYXRlZCBieSBub24tbnVtYmVyIGRlbGltaXRlcnMpIGluIGEgc3RyaW5nXG5cbmV4cG9ydCBjb25zdCBBZGQgPSAoc3RyaW5nKSA9PiB7XG4gIC8vQ2FzZXMgZm9yIGVtcHR5IHN0cmluZyAmIHNpbmdsZSBudW1iZXIgc3RyaW5nXG4gIGlmICghc3RyaW5nLmxlbmd0aCkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIC8vaGFuZGxlcyBhIHN0cmluZyB0aGF0IGlzIGEgc2luZ2xlIG51bWJlclxuICBpZiAoIXN0cmluZy5pbmNsdWRlcyhcIixcIikgJiYgIXN0cmluZy5pbmNsdWRlcyhcIi8vXCIpKSB7XG4gICAgLy9tYWtlcyBzdXJlIHNpbmdsZSBudW1iZXIgaXMgbGVzcyB0aGFuIDEwMDBcbiAgICBpZiAocGFyc2VJbnQoc3RyaW5nKSA8IDEwMDApIHtcbiAgICAgIHJldHVybiBwYXJzZUludChzdHJpbmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH1cblxuICAvL2lmIHRoZSBzdHJpbmcgY29udGFpbnMgdGhlIGNvbnRyb2wgY29kZSBiZWdpbm5pbmcsIHJlcGxhY2UgdGhlIHBvc3NpYmxlIGN1c3RvbSBkZWxpbWl0ZXJzXG4gIGlmIChzdHJpbmcuc3Vic3RyaW5nKDAsIDIpID09IFwiLy9cIikge1xuICAgIC8vcmVtb3ZlIHNsYXNoZXNcbiAgICBzdHJpbmcgPSBzdHJpbmcuc3Vic3RyaW5nKDIpO1xuICAgIC8vUmVwbGFjZSBhbnkgbm9uLW51bWJlcnMgKGV4Y2VwdCBmb3IgaHlwaGVucyB3aGljaCBkZXRlcm1pbmUgbmVnYXRpdmVzKSB3aXRoIGEgY29tbWEuIFRoZW4gcmVwbGFjZSBtdWx0aXBsZSBjb21tYXMgaW4gYSByb3cgd2l0aCBhIHNpbmdsZSBjb21tYVxuICAgIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKC9bXjAtOVxcLV0vZywgXCIsXCIpLnJlcGxhY2UoL1xcLCsvZ20sIFwiLFwiKTtcbiAgfVxuICAvL1R1cm4gdGhlIHN0cmluZyBpbnRvIGFuIGFycmF5IG9mIGludGVnZXJzXG4gIGNvbnN0IG51bXNBcnJheSA9IHN0cmluZy5zcGxpdChcIixcIikubWFwKChudW0pID0+IHBhcnNlSW50KG51bSkpO1xuXG4gIC8vQ2hlY2sgZm9yIG5lZ2F0aXZlIG51bWJlcnMuIElmIHRoZXJlIGFyZSBuZWdhdGl2ZXMsIHJldHVybiBhbGwgbmVnYXRpdmUgbnVtYmVycyBpbiB0aGUgc3RyaW5nXG4gIGlmIChudW1zQXJyYXkuc29tZSgobnVtKSA9PiBudW0gPCAwKSkge1xuICAgIHJldHVybiBgTmVnYXRpdmVzIG5vdCBhbGxvd2VkLiBOZWdhdGl2ZXM6ICR7bnVtc0FycmF5LmZpbHRlcigobnVtKSA9PiB7XG4gICAgICByZXR1cm4gbnVtIDwgMDtcbiAgICB9KX1gO1xuICB9XG5cbiAgLy9pZ25vcmVzIG51bWJlcnMgZ3JlYXRlciB0aGFuIDEwMDAgKCYgTmFOKVxuICBsZXQgZmlsdGVyZWRBcnJheSA9IG51bXNBcnJheS5maWx0ZXIoKG51bSkgPT4ge1xuICAgIHJldHVybiBudW0gPD0gMTAwMDtcbiAgfSk7XG5cbiAgLy9hZGRzIGFsbCBvZiB0aGUgbnVtYmVycyBpbiB0aGUgYXJyYXkgYW5kIHJldHVybnMgdGhlIHJlc3VsdFxuICByZXR1cm4gZmlsdGVyZWRBcnJheS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKTtcbn07XG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "string-calculator.js"
      ],
      "names": [
        "Add",
        "string",
        "length",
        "includes",
        "parseInt",
        "substring",
        "replace",
        "numsArray",
        "split",
        "map",
        "num",
        "some",
        "filter",
        "filteredArray",
        "reduce",
        "a",
        "b"
      ],
      "mappings": ";;;;;;;AAAA;AAEO,IAAMA,GAAG,GAAG,SAANA,GAAM,CAACC,MAAD,EAAY;AAC7B;AACA,MAAI,CAACA,MAAM,CAACC,MAAZ,EAAoB;AAClB,WAAO,CAAP;AACD,GAJ4B,CAK7B;;;AACA,MAAI,CAACD,MAAM,CAACE,QAAP,CAAgB,GAAhB,CAAD,IAAyB,CAACF,MAAM,CAACE,QAAP,CAAgB,IAAhB,CAA9B,EAAqD;AACnD;AACA,QAAIC,QAAQ,CAACH,MAAD,CAAR,GAAmB,IAAvB,EAA6B;AAC3B,aAAOG,QAAQ,CAACH,MAAD,CAAf;AACD,KAFD,MAEO;AACL,aAAO,CAAP;AACD;AACF,GAb4B,CAe7B;;;AACA,MAAIA,MAAM,CAACI,SAAP,CAAiB,CAAjB,EAAoB,CAApB,KAA0B,IAA9B,EAAoC;AAClC;AACAJ,IAAAA,MAAM,GAAGA,MAAM,CAACI,SAAP,CAAiB,CAAjB,CAAT,CAFkC,CAGlC;;AACAJ,IAAAA,MAAM,GAAGA,MAAM,CAACK,OAAP,CAAe,WAAf,EAA4B,GAA5B,EAAiCA,OAAjC,CAAyC,OAAzC,EAAkD,GAAlD,CAAT;AACD,GArB4B,CAsB7B;;;AACA,MAAMC,SAAS,GAAGN,MAAM,CAACO,KAAP,CAAa,GAAb,EAAkBC,GAAlB,CAAsB,UAACC,GAAD;AAAA,WAASN,QAAQ,CAACM,GAAD,CAAjB;AAAA,GAAtB,CAAlB,CAvB6B,CAyB7B;;AACA,MAAIH,SAAS,CAACI,IAAV,CAAe,UAACD,GAAD;AAAA,WAASA,GAAG,GAAG,CAAf;AAAA,GAAf,CAAJ,EAAsC;AACpC,uDAA4CH,SAAS,CAACK,MAAV,CAAiB,UAACF,GAAD,EAAS;AACpE,aAAOA,GAAG,GAAG,CAAb;AACD,KAF2C,CAA5C;AAGD,GA9B4B,CAgC7B;;;AACA,MAAIG,aAAa,GAAGN,SAAS,CAACK,MAAV,CAAiB,UAACF,GAAD,EAAS;AAC5C,WAAOA,GAAG,IAAI,IAAd;AACD,GAFmB,CAApB,CAjC6B,CAqC7B;;AACA,SAAOG,aAAa,CAACC,MAAd,CAAqB,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUD,CAAC,GAAGC,CAAd;AAAA,GAArB,EAAsC,CAAtC,CAAP;AACD,CAvCM",
      "sourceRoot": "/Users/jaymemitchell/Desktop/7shifts-tech-interview/src/",
      "sourcesContent": [
        "//String Calculator Function: Adds all numbers (separated by non-number delimiters) in a string\n\nexport const Add = (string) => {\n  //Cases for empty string & single number string\n  if (!string.length) {\n    return 0;\n  }\n  //handles a string that is a single number\n  if (!string.includes(\",\") && !string.includes(\"//\")) {\n    //makes sure single number is less than 1000\n    if (parseInt(string) < 1000) {\n      return parseInt(string);\n    } else {\n      return 0;\n    }\n  }\n\n  //if the string contains the control code beginning, replace the possible custom delimiters\n  if (string.substring(0, 2) == \"//\") {\n    //remove slashes\n    string = string.substring(2);\n    //Replace any non-numbers (except for hyphens which determine negatives) with a comma. Then replace multiple commas in a row with a single comma\n    string = string.replace(/[^0-9\\-]/g, \",\").replace(/\\,+/gm, \",\");\n  }\n  //Turn the string into an array of integers\n  const numsArray = string.split(\",\").map((num) => parseInt(num));\n\n  //Check for negative numbers. If there are negatives, return all negative numbers in the string\n  if (numsArray.some((num) => num < 0)) {\n    return `Negatives not allowed. Negatives: ${numsArray.filter((num) => {\n      return num < 0;\n    })}`;\n  }\n\n  //ignores numbers greater than 1000 (& NaN)\n  let filteredArray = numsArray.filter((num) => {\n    return num <= 1000;\n  });\n\n  //adds all of the numbers in the array and returns the result\n  return filteredArray.reduce((a, b) => a + b, 0);\n};\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1611433059044
  }
}